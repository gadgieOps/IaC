# -*- mode: ruby -*-
# vi: set ft=ruby :

require_relative "config"

# Validate the configuration
begin
    Config.validate!
    # Proceed with VM setup or other logic
  rescue RuntimeError => e
    puts e.message
    exit 1
  end

Vagrant.require_version Config::VAGRANT_VERSION
Vagrant.configure(Config::VAGRANT_CONFIG_VERSION) do |config|

    # VM Config
    config.vm.box = Config::BASE_IMAGE
    config.vm.synced_folder ".", "/vagrant", disabled: Config::DISABLE_SHARED_FOLDER
    config.vm.allow_fstab_modification = Config::ALLOW_FSTAB_MODIFICATION

    # SSH Config
    config.ssh.username = Config::SSH_USERNAME
    config.ssh.private_key_path = Config::SSH_PRIVATE_KEY_PATH
    config.ssh.port = Config::SSH_PORT
    config.ssh.guest_port = Config::SSH_GUEST_PORT
    config.ssh.forward_agent = Config::SSH_FORWARD_AGENT
    config.ssh.connect_timeout = Config::SSH_CONNECT_TIMEOUT
    config.ssh.insert_key = Config::SSH_INSERT_KEY
    config.ssh.key_type = Config::SSH_KEY_TYPE

    (1..Config::NODES).each do |i|

        ip = "#{Config::NETWORK}.#{i + 2}"
        name = "#{Config::HOSTNAME_BASE}-0#{i}"

        # Build the cloud-init ISO before a vagrant up
        config.trigger.before :up do |t|
            t.ruby do
                # Build the cloud-init ISO if specified
                if Config::BUILD_ISO
                    script = "#{Dir.pwd}/build-iso.sh"
                    system("bash", script, "#{i}") or raise "Failed to execute build-iso.sh"
                end
              end
        end

        # Refresh keys as part of the provisioning process
        config.trigger.after :up do |t|
            t.ruby do
                system("#{Dir.pwd}/refresh-keys.sh '#{ip}'") or raise "Failed to execute refresh-keys.sh"
            end
        end

        config.vm.define name do |vm_config|

            vm_config.ssh.host = ip
            vm_config.vm.hostname = name
            vm_config.vm.network "private_network", ip: ip
            vm_config.vm.provider Config::PROVIDER do |vm|

                vm.gui = Config::GUI
                vm.linked_clone = Config::LINKED_CLONE
                vm.memory = Config::MEMORY
                vm.cpus = Config::CPUS

                if Config::BASE_IMAGE
                    vm.vmx["sata0:1.deviceType"] = "cdrom-image"
                    vm.vmx["sata0:1.filename"] = "#{Dir.pwd}/seeds/cloud-init-0#{i}.iso"
                    vm.vmx["sata0:1.startConnected"] = "TRUE"
                end
            end
        end
    end
end
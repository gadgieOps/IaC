# -*- mode: ruby -*-
# vi: set ft=ruby :

require_relative "config"

# Validate the configuration
begin
    Config.validate!
    puts "Configuration is valid. Continuing..."
    # Proceed with VM setup or other logic
  rescue RuntimeError => e
    puts e.message
    exit 1
  end

# Build the cloud-init ISO if specified
if Config::BUILD_ISO
    script_path = "#{Dir.pwd}/build-iso.sh"
    system("bash", script_path, out: File::NULL, err: File::NULL) or raise "Failed to execute build-iso.sh"
end

Vagrant.require_version ">= 2.4.3"
Vagrant.configure("2") do |config|

    # VM Config
    config.vm.box = Config::BASE_IMAGE
    config.vm.synced_folder ".", "/vagrant", disabled: true
    config.vm.allow_fstab_modification = false

    # SSH Config
    config.ssh.insert_key = Config::SSH_INSERT_KEY
    config.ssh.key_type = Config::SSH_KEY_TYPE

    (1..Config::NODES).each do |i|
        config.vm.define "#{Config::HOSTNAME_BASE}-0#{i}" do |vm_config|

            vm_config.vm.hostname = "#{Config::HOSTNAME_BASE}-0#{i}"

            vm_config.vm.network "private_network" do |net|
                net.ip = "#{Config::NETWORK}.#{i + 1}"
                net.netmask = Config::NETMASK
                net.gateway = Config::GATEWAY
            end
            
            vm_config.vm.provider "vmware_desktop" do |vm|

                vm.gui = Config::GUI
                vm.linked_clone = Config::LINKED_CLONE
                vm.memory = Config::MEMORY
                vm.cpus = Config::CPUS

                if Config::BASE_IMAGE
                    vm.vmx["sata0:1.deviceType"] = "cdrom-image"
                    vm.vmx["sata0:1.filename"] = Config::CLOUD_INIT_ISO
                    vm.vmx["sata0:1.startConnected"] = "TRUE"
                end

            end
        end
    end
end
